<html> 
<head> 
<title>Exam Preparation</title> 
<script> 
	function examPreparation() 
	{ 
		alert("Exams are near, have you started preparing for them?"); 
		const startedPreparing = confirm("Have you started preparing for your exams?"); 
		if (startedPreparing) 
		{ 
			const studyHours = prompt("Great! How many hours are you studying daily?"); 
			if (studyHours && !isNaN(studyHours)) 
			{ 
				alert(Well done! Studying ${studyHours} hours daily is a good habit. Keep it up!); 
			} 
			else 
			{ 
				alert("Please make sure to plan your study hours. Stay focused!"); 
			} 
		} 
		else 
		{ 
			alert("It's never too late to start preparing. Begin your studies today and good luck!"); 
		} 
	} 
</script> 
</head> 
<body> 
<h1>Exam Preparation Reminder</h1> 
<button onclick="examPreparation()">Start Exam Preparation Check</button> 
</body> 
</html>





import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules

transactions = [
    ['Milk', 'Bread', 'Eggs'],
    ['Milk', 'Diaper', 'Beer', 'Eggs'],
    ['Milk', 'Diaper', 'Beer', 'Coke'],
    ['Bread', 'Eggs', 'Milk'],
    ['Bread', 'Diaper', 'Beer', 'Coke'],
    ['Milk', 'Diaper', 'Coke']
]

te = TransactionEncoder()
te_ary = te.fit(transactions).transform(transactions)
df = pd.DataFrame(te_ary, columns=te.columns_)

def apply_apriori(min_sup):
    print(f"\nResults for min_support = {min_sup}:\n")
    frequent_itemsets = apriori(df, min_support=min_sup, use_colnames=True)
    rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1.0)
    
    print("Frequent Itemsets:\n", frequent_itemsets)
    print("\nAssociation Rules:\n", rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']])


apply_apriori(0.5)
apply_apriori(0.3)
apply_apriori(0.2)